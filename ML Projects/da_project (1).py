# -*- coding: utf-8 -*-
"""DA Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HcNBhcqok5M7G381hFNJHhh8cF9o_gFP
"""

#importing pandas
import pandas as pd
#importing for vizualization
import matplotlib.pyplot as plt
import seaborn as sns

house = pd.read_csv('House Price India.csv')
house

house.isnull().sum() #checking for null values

house.shape

house.duplicated().sum() #checking for the duplicates

#histogram for distribution of House Prices
plt.figure(figsize=(10, 6))
sns.histplot(house['Price'], kde=True)
plt.title('Distribution of House Prices')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

#scatterplot for Price vs Living Area
plt.figure(figsize=(10, 6))
sns.scatterplot(x=house['living area'], y=house['Price'])
plt.title('Price vs Living Area')
plt.xlabel('Living Area (sq ft)')
plt.ylabel('Price')
plt.show()

# boxplot for price vs no. of bedrooms
plt.figure(figsize=(10, 6))
sns.boxplot(x=house['number of bedrooms'], y=house['Price'])
plt.title('Price vs Number of Bedrooms')
plt.xlabel('Number of Bedrooms')
plt.ylabel('Price')
plt.show()

#boxplot for outliers in house prices
plt.figure(figsize=(10, 6))
sns.boxplot(x=house['Price'])
plt.title('Outliers in House Prices')
plt.xlabel('Price')
plt.show()

#handling outliers

lower_bound = house['Price'].quantile(0.01)
upper_bound = house['Price'].quantile(0.99)

# Filter data based on percentile bounds
no_outliers = house[(house['Price'] >= lower_bound) & (house['Price'] <= upper_bound)]

# Display the updated dataset shape
no_outliers.shape

#boxplot for removing outliers in house prices
plt.figure(figsize=(10, 6))
sns.boxplot(x=no_outliers['Price'])
plt.title('Removed Outliers in House Prices')
plt.xlabel('Price')
plt.show()

house.columns

#filtering out important columns
cols = ["number of bedrooms","number of bathrooms", "living area", "lot area", "number of floors", "condition of the house",
        "grade of the house","Area of the house(excluding basement)","Area of the basement", "Built Year",
        "Distance from the airport", "Number of schools nearby", "lot_area_renov","Price" ]
ndt = no_outliers[cols]
ndt.shape

#checking for string values in the data
ndt.info()

from sklearn.model_selection import train_test_split
x = ndt.drop('Price', axis=1)
y = ndt['Price']

#splitting the data in train and tes 80% asnd 20%

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=21)

acc_dict = {} #creating an empty dictionary to store model scores

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score

lsr = Lasso()

lsr.fit(x_train, y_train)
y_pred_lasso = lsr.predict(x_test)

r2_score_lasso = r2_score(y_test, y_pred_lasso)
acc_dict['Lasso'] = r2_score_lasso
r2_score_lasso

lr = LinearRegression()

lr.fit(x_train, y_train)
lr_pred = lr.predict(x_test)

lr_r2_score = r2_score(y_test, lr_pred)
acc_dict['Linear Regression'] = lr_r2_score
lr_r2_score

rr = Ridge()

rr.fit(x_train, y_train)
ridge_pred = rr.predict(x_test)

ridge_r2 = r2_score(y_test, ridge_pred)
acc_dict['Ridge'] = ridge_r2
ridge_r2

rfr = RandomForestRegressor()

rfr.fit(x_train, y_train)
rfr_pred = rfr.predict(x_test)
rfr_r2 = r2_score(y_test, rfr_pred)
acc_dict['RandomForestRegressor'] = rfr_r2
rfr_r2

acc_df = pd.DataFrame([acc_dict])
acc_df = acc_df.drop('Linear Regression', axis=1)
acc_df.head(5)

acc_df = acc_df.T
models = acc_df.index
r2_scores = acc_df.values.flatten()
colors = sns.color_palette("hls", 3)
plt.figure(figsize=(12, 6))
bars = plt.bar(models, height=r2_scores, color=colors)
plt.xlabel('Model')
plt.ylabel('R2 Score')
plt.title('R2 Score of Different Models')

for i, (bar, value) in enumerate(zip(bars, r2_scores)):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.05, bar.get_height() + 0.01, f'{value:.5f}', ha='center', va='bottom', color='black', fontsize=10)
plt.xticks(rotation=45)
plt.show()

from sklearn.model_selection import cross_val_score
cross_score = cross_val_score(estimator=rfr, X=x_train, y=y_train, cv=5)
cross_score

cross_score.mean()

